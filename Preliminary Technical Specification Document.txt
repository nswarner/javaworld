/* Preliminary Technical Specification Document

	1. Project Goals
		1.1 Develop an interactive multiplayer environment
		1.2 Allow for the environment to be dynamically created
		1.3 Allow for vast amounts of randomization in the environment
		1.4 Allow for static environmental compartments (fixed cities)
		1.5 Simulate a world
			1.5.1 Include a rudimentary 3D world (n, s, e, w, u, d)
			1.5.2 Include other active artificial intelligences (AI-Mobs)
			1.5.3 Include Items within the world
		1.6 Develop multiple goal oriented play (GOP) objectives
		1.7 Additional Considerations
			1.7.1 Allow the environment to age (seasonally or more?)
			1.7.2 Allow for evolution of AI-Mobs
			
	2. System Architecture & Infrastructure
		2.1 Built in Java using the standard library
			2.1.1 The following packages / classes are available:
				NOTE: There is no overhead for importing an entire package
				A. java.util.Scanner
				B. java.text.NumberFormat
				C. java.text.DecimalFormat
				D. java.util.ArrayList
				E. java.util.Random
				F. java.util.Locale
				G. java.io.FileInputStream
				H. java.io.FileNotFoundException
				I. java.io.FileOutputStream
				J. java.io.IOException
				K. java.io.PrintWriter
				L. java.io.ObjectOutputStream
				M. java.io.ObjectInputStream
				N. java.io.EOFException
				O. java.io.Serializable
				P. java.io.File
				Q. java.net.ServerSocket
				R. java.net.Socket(?)
				S. java.io.DataOutputStream(?)
				T. java.io.InputStreamReader(?)
				*. java.util.StringTokenizer
		2.2 Built on Java Version 1.8
			2.2.1 Project was tested on 1.7 and worked without issue
		2.3 Any operating system which has the above noted java version
		2.4 Approximately 1mb of space (initially < 100kb, but grows)
		2.5 Access to write to the file system
		2.6 Access to the TCP/IP networking interface (sockets)
		2.7 A dedicated incoming port of 4,000 (if left unchanged)
		2.8 Support for multithreading

	3. User Dialogues
		3.1 Greeting Screen with ASCII Art (Photoshop conversion)
		3.2 Message of the Day (MOTD) upon logging in
		3.3 A recurring prompt
		3.4 Alongside the recurring prompt, a display of the current room,
			current exits, and any AI-Mob or Items
		3.5 Administrative Dialogues for World(Room), AI-Mob, and Item
			editing
		3.6 
		
	4. Background Tasks
		4.1 Mob-AI update, move, interact
		4.2 Items decay(?)
		4.3 Zones emerge(?)
		4.4 Zones reset (Mob-AI respawn, Items respawn)

	5. Database Model
		5.1 Flat File Database is used
		5.2 Players, Zones, Items, Mob-AI, and dynamic supplementary tools
			are all loaded from the DB
		5.3 Each structure's template is outlined in the provided
			supplementary documentation: TEMPLATE_*****.txt where *****
			represents Player, Zone, Item, ..., respectively
		5.4 Player Files are Serializable, but also have a secondary plain
			text file which contains the name and password of the player

	6. Interfaces to other Systems
	7. Non-functional requirements (response times, security, etc...)
	8. Dictionary for relevant Concepts / Entities
	9. Future Project Goals
		9.1 Convert from a Flat File Database to an SQL based Database
		9.2 A Helpfile System
		9.3 Weather System (Weather Patterns, environment interaction, etc)

	10. Overall Algorithm
		10.1 Game Loading Algorithm
			10.1.1 All Zones are loaded
			10.1.2 All Items are loaded
			10.1.3 All Mob-AI are loaded
			10.1.4 All Zones are instantiated
			10.1.5 All Mob-AI are spawned in their respective zones
			10.1.6 All Items are spawned on Mob-AI and in zones
			** All supplementary game-play tools are loaded			
		10.2 Game Loop Algorithm [GameServer.java]
			10.2.1 New Thread spawns to handle incoming connections
				10.2.1.1 Accept connection, spawn new Thread to handle next
							connection - repeat as needed for incoming
							connections
				10.2.1.2 Solicit Character Name from new Connection
				10.2.1.3 Check whether Character exists
				10.2.1.4 If exists, solicit password, load character
				10.2.1.5 If doesn't exist, begin character creation process
			10.2.2 Update the World on time-threshold
			10.2.3 Update all Players / Mob-AI on time-threshold
			10.2.4 Update all AI-Mobs and Items on time-threshold
		10.3 Player-Thread Algorithm [Player.java]
			10.3.1 Player input is accepted
			10.3.2 Player input is interpreted
			10.3.3 If valid, associated method to input is executed
			10.3.4 Special case: "quit" gracefully kills the thread

		Appendix A: Why did I do <xyz> when there's a better way?
			- This project was built using Java 1.8 and was required to
				stay within the limitations of our course curriculum. We
				did not cover Sockets nor Threads in depth, nor did we
				discuss synchronized collections or maps, etc. Therefore,
				some oddity within the code (which may be better written
				with other more advanced classes or methods) were avoided.
				Further, reasonable attempts were made to make this program
				thread safe.
			- Socket communication used low-level write and read methods
				of the InputStream and OutputStream classes because
				other high-level solutions that were available blocked
				on read and often required flushes on write.
			- The intention was to develop a multiplayer online game which
				could handle many connections but would not use excessive
				resources through spawning many threads. By splitting off
				the incoming connections into its own thread, the game loop
				could manage the socket input and output while the server
				could remain listening (blocking) without interrupting the
				game.
		Appendix B: How can I rebuild / recreate / add <xyz>?
			- Read the documentation! There's plenty of it. :-) Familiarize
				yourself with the main game loop inside of the GameServer
				class. Once you understand how a player's actions are
				interpreted, consider becoming familiar with the class
				that you are most interested in. Players are PCs, Mobs are
				NPCs, Zones and Rooms are the world, Items are items. It's
				quite self-explanatory, with much effort going into
				compartmentalizing (and encapsulating) the game's mechanics.





*/